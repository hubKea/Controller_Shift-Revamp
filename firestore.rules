rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function hasPermission(permission) {
      let user = getUserData();
      return user != null && user.permissions != null && user.permissions[permission] == true;
    }

    function isManager() {
      let user = getUserData();
      return user != null && user.role == 'manager';
    }

    function canApprove() {
      return hasPermission('canApprove');
    }

    function canViewAll() {
      return hasPermission('canViewAll');
    }

    function isCreator(resource) {
      return isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    function isDraft(resource) {
      return resource.data.status == 'draft';
    }

    function isSubmitted(resource) {
      return resource.data.status == 'submitted';
    }

    function matchesControllerField(value, displayName, email) {
      return (value is string) && (
        (displayName is string && value == displayName) ||
        (email is string && value == email) ||
        (email is string && value is string && email.matches('^' + value + '@.*$'))
      );
    }

    function matchesControllerAssignment(resource) {
      let user = getUserData();
      return user != null && (
        matchesControllerField(resource.data.controller1, user.displayName, user.email) ||
        matchesControllerField(resource.data.controller2, user.displayName, user.email)
      );
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isManager();

      allow create: if isAuthenticated() && request.auth.uid == userId && request.resource.data.uid == request.auth.uid;

      allow update: if isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.permissions == resource.data.permissions &&
        request.resource.data.isActive == resource.data.isActive &&
        request.resource.data.createdAt == resource.data.createdAt;

      allow update: if isManager();
      allow delete: if false;
    }

    match /shiftReports/{reportId} {
      allow read: if isAuthenticated() && (
        isCreator(resource) ||
        isManager() ||
        canViewAll() ||
        canApprove() ||
        matchesControllerAssignment(resource)
      );

      allow create: if isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.status == 'draft' &&
        request.resource.data.version == 1;

      allow update: if isAuthenticated() && isCreator(resource) && isDraft(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.status == 'draft';

      allow update: if isAuthenticated() && isCreator(resource) && isDraft(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.status == 'submitted';

      allow update: if isManager();

      allow update: if canApprove() && isSubmitted(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        (request.resource.data.status == 'submitted' ||
         request.resource.data.status == 'under_review' ||
         request.resource.data.status == 'approved' ||
         request.resource.data.status == 'rejected');

      allow delete: if isAuthenticated() && isCreator(resource) && isDraft(resource);
      allow delete: if isManager() && isDraft(resource);
      allow delete: if false;
    }

    match /approvals/{approvalId} {
      allow read: if isAuthenticated() && (
        resource.data.reportCreatedBy == request.auth.uid ||
        isManager() ||
        canApprove()
      );

      allow create: if canApprove() &&
        request.resource.data.reportId is string &&
        request.resource.data.reportCreatedBy is string &&
        request.resource.data.approverId == request.auth.uid &&
        request.resource.data.action in ['approved', 'rejected'];

      allow update: if false;
      allow delete: if false;
    }

    match /inboxes/{uid}/items/{nid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      // All inbox writes must go through trusted infrastructure (Admin SDK / Functions).
      allow write: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
