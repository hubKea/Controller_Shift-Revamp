rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function hasPermission(permission) {
      let user = getUserData();
      return user != null && user.permissions != null && user.permissions[permission] == true;
    }

    function isManager() {
      let user = getUserData();
      return user != null && user.role == 'manager';
    }

    function canApprove() {
      return hasPermission('canApprove');
    }

    function canViewAll() {
      return hasPermission('canViewAll');
    }

    function isCreator(resource) {
      return isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    function isDraft(resource) {
      return resource.data.status == 'draft';
    }

    function isSubmitted(resource) {
      return resource.data.status == 'submitted';
    }

    function matchesControllerField(value, displayName, email) {
      return (value is string) && (
        (displayName is string && value == displayName) ||
        (email is string && value == email) ||
        (email is string && value is string && email.matches('^' + value + '@.*$'))
      );
    }

    function controller1IdValue(resourceData) {
      return (resourceData.controller1Id is string && resourceData.controller1Id != '')
        ? resourceData.controller1Id
        : (
            (resourceData.controller1Uid is string && resourceData.controller1Uid != '')
              ? resourceData.controller1Uid
              : ''
          );
    }

    function controller2IdValue(resourceData) {
      return (resourceData.controller2Id is string && resourceData.controller2Id != '')
        ? resourceData.controller2Id
        : (
            (resourceData.controller2Uid is string && resourceData.controller2Uid != '')
              ? resourceData.controller2Uid
              : ''
          );
    }

    function controllerIdsAreDistinct(resourceData) {
      let first = controller1IdValue(resourceData);
      let second = controller2IdValue(resourceData);
      return !(
        (first is string && first != '') &&
        (second is string && second != '') &&
        first == second
      );
    }

    function controllerUidListIsValid(resourceData) {
      return !(resourceData.controllerUids is list) ||
        (
          resourceData.controllerUids.size() <= 2 &&
          resourceData.controllerUids.all(uid, uid is string && uid != '') &&
          !(
            resourceData.controllerUids.size() == 2 &&
            resourceData.controllerUids[0] == resourceData.controllerUids[1]
          ) &&
          (
            !(controller1IdValue(resourceData) is string && controller1IdValue(resourceData) != '') ||
            resourceData.controllerUids.hasAny([controller1IdValue(resourceData)])
          ) &&
          (
            !(controller2IdValue(resourceData) is string && controller2IdValue(resourceData) != '') ||
            resourceData.controllerUids.hasAny([controller2IdValue(resourceData)])
          )
        );
    }

    /**
     * ## Audit 2025-10-19 - Controller validation
     *
     * - Enforce distinct controller assignments at the rule layer to close the gap identified during the QA logic audit.
     * - Require the persisted `controllerUids` metadata to remain consistent with individual controller fields so
     *   inbox, conversation, and review permissions stay aligned.
     */
    function controllerAssignmentsAreValid(resourceData) {
      return controllerIdsAreDistinct(resourceData) && controllerUidListIsValid(resourceData);
    }

    function matchesControllerAssignment(resource) {
      let user = getUserData();
      let uid = isAuthenticated() ? request.auth.uid : '';
      return user != null && (
        (
          uid != '' &&
          (
            (resource.data.controller1Id is string && resource.data.controller1Id == uid) ||
            (resource.data.controller2Id is string && resource.data.controller2Id == uid) ||
            (resource.data.controller1Uid is string && resource.data.controller1Uid == uid) ||
            (resource.data.controller2Uid is string && resource.data.controller2Uid == uid) ||
            (resource.data.controllerUids is list && resource.data.controllerUids.hasAny([uid]))
          )
        ) ||
        matchesControllerField(resource.data.controller1, user.displayName, user.email) ||
        matchesControllerField(resource.data.controller2, user.displayName, user.email)
      );
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isManager();
      allow read: if isManager();

      allow create: if isAuthenticated() && request.auth.uid == userId && request.resource.data.uid == request.auth.uid;

      allow update: if isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.permissions == resource.data.permissions &&
        request.resource.data.isActive == resource.data.isActive &&
        request.resource.data.createdAt == resource.data.createdAt;

      allow update: if isManager();
      allow delete: if false;
    }

    match /shiftReports/{reportId} {
      allow read: if isAuthenticated() && (
        isCreator(resource) ||
        isManager() ||
        canViewAll() ||
        canApprove() ||
        matchesControllerAssignment(resource)
      );

      allow create: if isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.status == 'draft' &&
        request.resource.data.version == 1 &&
        controllerAssignmentsAreValid(request.resource.data);

      allow update: if isAuthenticated() && isCreator(resource) && isDraft(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.status == 'draft' &&
        controllerAssignmentsAreValid(request.resource.data);

      allow update: if isAuthenticated() && isCreator(resource) && isDraft(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.status == 'submitted' &&
        controllerAssignmentsAreValid(request.resource.data);

      allow update: if isManager() && controllerAssignmentsAreValid(request.resource.data);

      allow update: if canApprove() && isSubmitted(resource) &&
        request.resource.data.createdBy == resource.data.createdBy &&
        (request.resource.data.status == 'submitted' ||
         request.resource.data.status == 'under_review' ||
         request.resource.data.status == 'approved' ||
         request.resource.data.status == 'rejected') &&
        resource.data.createdBy != request.auth.uid &&
        controllerAssignmentsAreValid(request.resource.data);

      allow delete: if isAuthenticated() && isCreator(resource) && isDraft(resource);
      allow delete: if isManager() && isDraft(resource);
      allow delete: if false;
    }

    match /approvals/{approvalId} {
      allow read: if isAuthenticated() && (
        resource.data.reportCreatedBy == request.auth.uid ||
        isManager() ||
        canApprove()
      );

      allow create: if canApprove() &&
        request.resource.data.reportId is string &&
        request.resource.data.reportCreatedBy is string &&
        request.resource.data.approverId == request.auth.uid &&
        request.resource.data.action in ['approved', 'rejected'];

      allow update: if false;
      allow delete: if false;
    }

    match /inboxes/{uid}/items/{nid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      // All inbox writes must go through trusted infrastructure (Admin SDK / Functions).
      allow write: if false;
    }

    match /conversations/{conversationId} {
      function isConversationParticipant() {
        return isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
      }

      allow get, list: if isConversationParticipant();

      allow create: if isAuthenticated() &&
        request.resource.data.reportId is string &&
        request.resource.data.shiftDate is string &&
        request.resource.data.siteName is string &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() > 0 &&
        request.resource.data.participants.all(participant, participant is string) &&
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.unreadCount is map &&
        request.resource.data.unreadCount.keys().hasOnly(request.resource.data.participants) &&
        request.resource.data.participants.hasOnly(request.resource.data.unreadCount.keys()) &&
        request.resource.data.unreadCount.keys().all(participant, request.resource.data.unreadCount[participant] is number) &&
        request.resource.data.createdAt == request.time &&
        (request.resource.data.lastMessageAt == null || request.resource.data.lastMessageAt == request.time);

      allow update: if isConversationParticipant() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['unreadCount']) &&
        request.resource.data.unreadCount is map &&
        request.resource.data.unreadCount.keys().hasOnly(resource.data.unreadCount.keys()) &&
        resource.data.unreadCount.keys().hasOnly(request.resource.data.unreadCount.keys()) &&
        request.resource.data.unreadCount[request.auth.uid] is number &&
        request.resource.data.unreadCount[request.auth.uid] == 0 &&
        resource.data.unreadCount.keys().all(key,
          key == request.auth.uid || request.resource.data.unreadCount[key] == resource.data.unreadCount[key]
        );

      allow delete: if false;

      match /messages/{messageId} {
        function parentConversation() {
          return get(/databases/$(database)/documents/conversations/$(conversationId));
        }

        function messageParticipant() {
          return isAuthenticated() && parentConversation().data.participants.hasAny([request.auth.uid]);
        }

        allow get, list: if messageParticipant();

        allow create: if messageParticipant() &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.senderName is string &&
          request.resource.data.content is string &&
          request.resource.data.timestamp == request.time &&
          (request.resource.data.system == null || request.resource.data.system == false);

        allow update: if false;
        allow delete: if false;
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
